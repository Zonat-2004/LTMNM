import React, { useState, useEffect } from 'react';
import axios from 'axios';

const AdminCartPage = () => {
    const [orders, setOrders] = useState([]);
    const [editingOrderId, setEditingOrderId] = useState(null);
    const [newStatus, setNewStatus] = useState('');

    // L·∫•y danh s√°ch ƒë∆°n h√†ng
    const fetchOrders = () => {
        axios.get('http://localhost:8000/api/orders/')
            .then(response => {
                setOrders(response.data);
            })
            .catch(error => {
                console.error('L·ªói khi t·∫£i ƒë∆°n h√†ng:', error);
            });
    };

    useEffect(() => {
        fetchOrders();
    }, []);

    // C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng
    const handleUpdateStatus = (orderId, status) => {
        axios.patch(`http://localhost:8000/api/orders/${orderId}/update-status/`, {
            order_status: status
        })
        .then(() => {
            setOrders(prevOrders =>
                prevOrders.map(order =>
                    order._id === orderId ? { ...order, order_status: status } : order
                )
            );
            setEditingOrderId(null); // ·∫®n dropdown sau khi c·∫≠p nh·∫≠t
        })
        .catch(error => {
            console.error('L·ªói c·∫≠p nh·∫≠t tr·∫°ng th√°i:', error);
        });
    };

    // X√≥a ƒë∆°n h√†ng v·ªõi x√°c nh·∫≠n
    const handleDeleteOrder = (orderId) => {
        const isConfirmed = window.confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ƒë∆°n h√†ng n√†y?");
        if (isConfirmed) {
            axios.delete(`http://localhost:8000/api/orders/${orderId}/delete/`)
                .then(() => {
                    // C·∫≠p nh·∫≠t l·∫°i danh s√°ch ƒë∆°n h√†ng sau khi x√≥a
                    setOrders(prev => prev.filter(order => order._id !== orderId));
                    alert('ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√≥a th√†nh c√¥ng!');
                })
                .catch(error => {
                    console.error('L·ªói khi x√≥a ƒë∆°n h√†ng:', error);
                });
        }
    };

    return (
        <div className="container mt-5">
            <h1 className="text-center mb-4">üì¶ Danh s√°ch ƒë∆°n h√†ng</h1>

            {orders.length === 0 ? (
                <div className="alert alert-danger text-center">
                    Kh√¥ng c√≥ ƒë∆°n h√†ng n√†o.
                </div>
            ) : (
                orders.map((order, index) => (
                    <div key={index} className="card mb-4">
                        <div className="card-header bg-info text-white d-flex justify-content-between align-items-center">
                            <h5 className="mb-0">üßæ ƒê∆°n h√†ng #{index + 1}</h5>
                        </div>
                        <div className="card-body">
                            <p><strong>üë§ Ng∆∞·ªùi nh·∫≠n:</strong> {order.shipping_address.recipient_name}</p>
                            <p><strong>üìû SƒêT:</strong> {order.shipping_address.phone}</p>
                            <p><strong>üìç ƒê·ªãa ch·ªâ:</strong> {order.shipping_address.address}</p>
                            <p><strong>üí≥ Thanh to√°n:</strong> {order.payment_method === 'cod' ? 'Thanh to√°n khi nh·∫≠n h√†ng' : order.payment_method}</p>
                            <p><strong>üìÖ Ng√†y ƒë·∫∑t:</strong> {new Date(order.created_at).toLocaleString('vi-VN')}</p>

                            <table className="table table-bordered text-center mt-3">
                                <thead className="table-warning">
                                    <tr>
                                        <th>T√™n b√°nh</th>
                                        <th>·∫¢nh</th>
                                        <th>Gi√°</th>
                                        <th>S·ªë l∆∞·ª£ng</th>
                                        <th>Th√†nh ti·ªÅn</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {order.items.map((item, i) => (
                                        <tr key={i}>
                                            <td>{item.cake.name}</td>
                                            <td>
                                                <img
                                                    src={`http://localhost:8000${item.cake.image}`}
                                                    alt={item.cake.name}
                                                    style={{ width: '80px', height: '80px', objectFit: 'cover', borderRadius: '8px' }}
                                                />
                                            </td>
                                            <td>{item.cake.price.toLocaleString()} VND</td>
                                            <td>{item.quantity}</td>
                                            <td>{item.total_price.toLocaleString()} VND</td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>

                            <div className="text-end">
                                <strong>T·ªïng ti·ªÅn ƒë∆°n h√†ng: </strong>
                                <span className="text-danger fw-bold">
                                    {order.total_order_price.toLocaleString()} VND
                                </span>
                            </div>

                            <p className="mt-2">
                                <strong>üöö Tr·∫°ng th√°i:</strong>
                                <span className={`ms-2 badge ${
                                    order.order_status === 'pending' ? 'bg-secondary' :
                                    order.order_status === 'confirmed' ? 'bg-primary' :
                                    order.order_status === 'shipping' ? 'bg-warning text-dark' :
                                    order.order_status === 'delivered' ? 'bg-success' :
                                    order.order_status === 'cancelled' ? 'bg-danger' :
                                    'bg-dark'
                                }`}>
                                    { {
                                        pending: 'ƒêang x·ª≠ l√Ω',
                                        confirmed: 'ƒê√£ x√°c th·ª±c',
                                        shipping: 'ƒêang giao h√†ng',
                                        delivered: 'ƒê√£ giao h√†ng',
                                        cancelled: 'ƒê√£ hu·ª∑'
                                    }[order.order_status] || 'Kh√¥ng x√°c ƒë·ªãnh'}
                                </span>
                            </p>

                            {/* N√∫t s·ª≠a tr·∫°ng th√°i */}
                            {editingOrderId !== order._id ? (
                                <button
                                    className="btn btn-outline-warning w-100 mt-3 d-flex align-items-center justify-content-center fw-bold"
                                    style={{ fontSize: '1.1rem', transition: 'all 0.3s' }}
                                    onClick={() => {
                                        setEditingOrderId(order._id);
                                        setNewStatus(order.order_status);
                                    }}
                                >
                                    ‚úèÔ∏è <span className="ms-2">Ch·ªânh s·ª≠a tr·∫°ng th√°i</span>
                                </button>
                            ) : (
                                <div className="d-flex flex-wrap align-items-center mt-3 gap-2">
                                    <select
                                        className="form-select"
                                        value={newStatus}
                                        onChange={(e) => setNewStatus(e.target.value)}
                                        style={{ maxWidth: '220px', flex: '1 1 auto' }}
                                    >
                                        <option value="pending">ƒêang x·ª≠ l√Ω</option>
                                        <option value="confirmed">ƒê√£ x√°c th·ª±c</option>
                                        <option value="shipping">ƒêang giao h√†ng</option>
                                        <option value="delivered">ƒê√£ giao h√†ng</option>
                                        <option value="cancelled">ƒê√£ hu·ª∑</option>
                                    </select>
                                    <button
                                        className="btn btn-success fw-bold"
                                        onClick={() => handleUpdateStatus(order._id, newStatus)}
                                    >
                                        üíæ L∆∞u
                                    </button>
                                    <button
                                        className="btn btn-secondary"
                                        onClick={() => setEditingOrderId(null)}
                                    >
                                        ‚ùå H·ªßy
                                    </button>
                                </div>
                            )}

                            {/* N√∫t x√≥a ƒë∆°n h√†ng */}
                            <button
                                className="btn btn-outline-danger w-100 mt-3 d-flex align-items-center justify-content-center fw-bold"
                                style={{ fontSize: '1.1rem', transition: 'all 0.3s' }}
                                onClick={() => handleDeleteOrder(order._id)}
                            >
                                üóëÔ∏è <span className="ms-2">X√≥a ƒë∆°n h√†ng n√†y</span>
                            </button>
                        </div>
                    </div>
                ))
            )}
        </div>
    );
};

export default AdminCartPage;
